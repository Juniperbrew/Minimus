TODO support for variable/random projectile velocity,rotation,range,size?,projectilecount?,damage?,knockback?,friction?
TODO no interpolation when respawning or changing map
TODO other players aiming animation
TODO consider proper pathfinding

DONE scale projectile hitbox from their texture size
DONE smoother map change
DONE prevent wave healthpacks from spawning inside walls
DONE enemies cant see behind themselves, enemy turnrate
DONE sync entity active weapon, specifically players
DONE different enemy speeds
DONE spawn with first primary and first secondary weapon
DONE ammotypes
DONE live fps graph
DONE running
DONE minimap
DONE auto reconnect if server restarts
DONE server crashes when player killed by multiple things at once (probably only relevant to contact damage)
DONE make npc store the location where player was last seen instead of actual location
DONE invulnerability after joining before moving, maybe have chasing enemies ignore the player too
DONE if a player dies or disconnects while being chased the enemy will get stuck where the player died
DONE fix first shot not sent to server
DONE fix so enemies dont shoot directly after they spawn
DONE dont move camera after player dies
DONE change projectile damage
DONE add healthpacks
DONE add waves
DONE players take damage from contact
DONE add 3 different AI, passive, passive+shooting, active+shooting
DONE add hud with score info
DONE add weapon switch with numbers for mouse1 and shift+numbers for mouse2
DONE add shotgun
DONE add tiled background
DONE add received timestamp folders in receivedfiles
DONE autosend error logs
DONE add sound effects
DONE store data usage in logfile [connection time, (max/avg) ping, (max/avg) fake ping, max entities, max players, (max/avg) kb/s, bytes (sent/received), (max/avg) packets/s, packets (sent/received), max packet size]
DONE remove health interpolation
DONE add projectile weapon (bow)
DONE add 360 degree turning
DONE show hitscan weapon use on all clients
DONE console autocomplete and reverse history with down key
DONE have server track what entities have changed and what attributes have changed
DONE have server limit max entities that can move at once
DONE make entities pick a destination, walk there and wait untill they get another destination
DONE move viewport on server
DONE larger map
DONE viewport
DONE autoscroll console
DONE get console textfield history when pressing up arrow
DONE console, let server change client values
DONE server packets sent/received per connection

server tickrate
updaterate

cmdrate


client in the future 


i have a server and client running at 30 ticks per second, client checks input once per tick and send it to server,

client tick count will lag behind the server


[server can run lower tickrate than client polls commands, this mean we apply multiple inputs per tick on server]



client send command packet with tick number attached[DONE]

server sends entity states with tick number attached[DONE]

when client gets a entityState it checks it's tick number, this is now the authorative state
	client syncs all entities to this entityState (interpolate between this and the previous entityState)
	after this the player is moved using the command packets which have already been sent but server haven't acknowledged
	

what do we do if client and server tickrate goes out of sync?
if client runs faster the server will start queuing input commands and the input delay will keep getting bigger, also the client has to gradually simulate more inputs per tick for clientside prediction because the client time keeps going further from server time

if server runs faster than client then server never processes received input commands because their tick number is always lower than
the current tick number on server

server>client: server tick count always ahead of client so input is never processed, client keeps getting reverted to same position
client>server: server tick count always behind client so server keeps piling up on input commands it cant process in time, client keeps having more inputs to simulate after syncing serverstate




what do we do when player send multiple input requests per tick


createStateSnapshot()
cl_interp=100ms

last authorative state time + time since it arrived is clientStateTime
if(packet.time < lastPacket.time-cl_interp) remove packet

find between which two packets clientStateTime-cl_interp is
renderTime = clientStateTime-cl_interp

interpolate(packet1,packet2,alpha)


adjustable vars
client: interp, pollrate
server: tickrate





decouple server tickRate from updateRate[DONE]
decouple client inputrate from updaterate [DONE]
time client render thread [DONE]


10x100ms inputs sent 10 times a second
40*25ms inputs sent 40 times a second
40*25ms inputs sent 10 times a second (4 updates per packet)
[currently server processes all updates from one player then processes the next player]


support changing velocity on client/server


add HP, draw draining hp as gradually filling red box
hitscan laser
hitscan sword
projectile

new players are not added on clients untill they receive full entity update

